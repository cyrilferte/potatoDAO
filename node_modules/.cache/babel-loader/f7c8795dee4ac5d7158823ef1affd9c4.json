{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // nextPromise is the key to the implementation\n              // it is resolved by the return handler passed to the\n              // \"next\" function\n              nextPromise = new Promise(function (resolve) {\n                resolveNextPromise = resolve;\n              });\n              returnHandlerCallback = null;\n              nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n              asyncNext = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n                          // the consumer's async middleware will resume executing.\n                          // eslint-disable-next-line node/callback-return\n\n                          next(function (runReturnHandlersCallback) {\n                            // This callback comes from JsonRpcEngine._runReturnHandlers\n                            returnHandlerCallback = runReturnHandlersCallback;\n                            resolveNextPromise();\n                          });\n                          _context.next = 4;\n                          return nextPromise;\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function asyncNext() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              _context2.prev = 4;\n              _context2.next = 7;\n              return asyncMiddleware(req, res, asyncNext);\n\n            case 7:\n              if (!nextWasCalled) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 10;\n              return nextPromise;\n\n            case 10:\n              // we must wait until the return handler is called\n              returnHandlerCallback(null);\n              _context2.next = 14;\n              break;\n\n            case 13:\n              end(null);\n\n            case 14:\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n\n              if (returnHandlerCallback) {\n                returnHandlerCallback(_context2.t0);\n              } else {\n                end(_context2.t0);\n              }\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nexports.createAsyncMiddleware = createAsyncMiddleware;","map":{"version":3,"mappings":";;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;AAiBA,SAAgBA,qBAAhB,CACEC,eADF,EAC+C;AAE7C;AAAA,wEAAO,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AAEMC,yBALD,GAKe,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAY;AAC1CC,kCAAkB,GAAGD,OAArB;AACD,eAFmB,CALf;AASDE,mCATC,GASgC,IAThC;AAUDC,2BAVC,GAUe,KAVf,EAYL;;AACMC,uBAbD;AAAA,qFAaa;AAAA;AAAA;AAAA;AAAA;AAChBD,uCAAa,GAAG,IAAhB,CADgB,CAGhB;AACA;AACA;;AACAP,8BAAI,CAAC,UAACS,yBAAD,EAA8B;AACjC;AACAH,iDAAqB,GAAGG,yBAAxB;AACAJ,8CAAkB;AACnB,2BAJG,CAAJ;AANgB;AAAA,iCAWVH,WAXU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAbb;;AAAA,gCAaCM,SAbD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4BGX,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWS,SAAX,CA5BlB;;AAAA;AAAA,mBA8BCD,aA9BD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+BKL,WA/BL;;AAAA;AA+BkB;AAClBI,mCAA+C,CAAC,IAAD,CAA/C;AAhCA;AAAA;;AAAA;AAkCDL,iBAAG,CAAC,IAAD,CAAH;;AAlCC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqCH,kBAAIK,qBAAJ,EAA2B;AACxBA,qCAA+C,cAA/C;AACF,eAFD,MAEO;AACLL,mBAAG,cAAH;AACD;;AAzCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA4CD;;AA/CDS","names":["createAsyncMiddleware","asyncMiddleware","req","res","next","end","nextPromise","Promise","resolve","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","exports"],"sourceRoot":"","sources":["../src/createAsyncMiddleware.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}