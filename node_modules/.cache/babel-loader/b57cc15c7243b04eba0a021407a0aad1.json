{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _slicedToArray = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/cferte/Work/test-tuto/potatoDAO/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\n\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nvar eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nvar JsonRpcEngine = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(JsonRpcEngine, _safe_event_emitter_);\n\n  var _super = _createSuper(JsonRpcEngine);\n\n  function JsonRpcEngine() {\n    var _this;\n\n    _classCallCheck(this, JsonRpcEngine);\n\n    _this = _super.call(this);\n    _this._middleware = [];\n    return _this;\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  _createClass(JsonRpcEngine, [{\n    key: \"push\",\n    value: function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== 'function') {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n\n        return this._handleBatch(req);\n      }\n\n      if (cb) {\n        return this._handle(req, cb);\n      }\n\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this2 = this;\n\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);\n\n                case 3:\n                  _yield$JsonRpcEngine$ = _context2.sent;\n                  _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);\n                  middlewareError = _yield$JsonRpcEngine$2[0];\n                  isComplete = _yield$JsonRpcEngine$2[1];\n                  returnHandlers = _yield$JsonRpcEngine$2[2];\n\n                  if (!isComplete) {\n                    _context2.next = 12;\n                    break;\n                  }\n\n                  _context2.next = 11;\n                  return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n                case 11:\n                  return _context2.abrupt(\"return\", end(middlewareError));\n\n                case 12:\n                  return _context2.abrupt(\"return\", next( /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(handlerCallback) {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n                            case 3:\n                              _context.next = 8;\n                              break;\n\n                            case 5:\n                              _context.prev = 5;\n                              _context.t0 = _context[\"catch\"](0);\n                              return _context.abrupt(\"return\", handlerCallback(_context.t0));\n\n                            case 8:\n                              return _context.abrupt(\"return\", handlerCallback());\n\n                            case 9:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[0, 5]]);\n                    }));\n\n                    return function (_x5) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }()));\n\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  return _context2.abrupt(\"return\", end(_context2.t0));\n\n                case 18:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 15]]);\n        }));\n\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Promise.all( // 1. Begin executing each request in the order received\n                reqs.map(this._promiseHandle.bind(this)));\n\n              case 3:\n                responses = _context3.sent;\n\n                if (!cb) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", cb(null, responses));\n\n              case 6:\n                return _context3.abrupt(\"return\", responses);\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!cb) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", cb(_context3.t0));\n\n              case 13:\n                throw _context3.t0;\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n\n      function _handleBatch(_x6, _x7) {\n        return _handleBatch2.apply(this, arguments);\n      }\n\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        _this3._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Requests must be plain objects. Received: \".concat(typeof callerReq), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error2, {\n                  id: undefined,\n                  jsonrpc: '2.0',\n                  error: _error2\n                }));\n\n              case 3:\n                if (!(typeof callerReq.method !== 'string')) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Must specify a string method. Received: \".concat(typeof callerReq.method), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error3, {\n                  id: callerReq.id,\n                  jsonrpc: '2.0',\n                  error: _error3\n                }));\n\n              case 6:\n                req = Object.assign({}, callerReq);\n                res = {\n                  id: req.id,\n                  jsonrpc: req.jsonrpc\n                };\n                error = null;\n                _context4.prev = 9;\n                _context4.next = 12;\n                return this._processRequest(req, res);\n\n              case 12:\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t0 = _context4[\"catch\"](9);\n                // A request handler error, a re-thrown middleware error, or something\n                // unexpected.\n                error = _context4.t0;\n\n              case 17:\n                if (error) {\n                  // Ensure no result is present on an errored response\n                  delete res.result;\n\n                  if (!res.error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                  }\n                }\n\n                return _context4.abrupt(\"return\", cb(error, res));\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[9, 14]]);\n      }));\n\n      function _handle(_x8, _x9) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n\n              case 2:\n                _yield$JsonRpcEngine$3 = _context5.sent;\n                _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);\n                error = _yield$JsonRpcEngine$4[0];\n                isComplete = _yield$JsonRpcEngine$4[1];\n                returnHandlers = _yield$JsonRpcEngine$4[2];\n\n                // Throw if \"end\" was not called, or if the response has neither a result\n                // nor an error.\n                JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n                // middleware processing.\n\n\n                _context5.next = 10;\n                return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n              case 10:\n                if (!error) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                throw error;\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _processRequest(_x10, _x11) {\n        return _processRequest2.apply(this, arguments);\n      }\n\n      return _processRequest;\n    }()\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                returnHandlers = [];\n                error = null;\n                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n                _iterator = _createForOfIteratorHelper(middlewareStack);\n                _context6.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 18;\n                  break;\n                }\n\n                middleware = _step.value;\n                _context6.next = 10;\n                return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n              case 10:\n                _yield$JsonRpcEngine$5 = _context6.sent;\n                _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);\n                error = _yield$JsonRpcEngine$6[0];\n                isComplete = _yield$JsonRpcEngine$6[1];\n\n                if (!isComplete) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                return _context6.abrupt(\"break\", 18);\n\n              case 16:\n                _context6.next = 6;\n                break;\n\n              case 18:\n                _context6.next = 23;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](4);\n\n                _iterator.e(_context6.t0);\n\n              case 23:\n                _context6.prev = 23;\n\n                _iterator.f();\n\n                return _context6.finish(23);\n\n              case 26:\n                return _context6.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n\n              case 27:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[4, 20, 23, 26]]);\n      }));\n\n      function _runAllMiddleware(_x12, _x13, _x14) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n\n          if (error) {\n            res.error = eth_rpc_errors_1.serializeError(error);\n          } // True indicates that the request should end\n\n\n          resolve([error, true]);\n        };\n\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== 'function') {\n                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: \\\"next\\\" return handlers must be functions. \" + \"Received \\\"\".concat(typeof returnHandler, \"\\\" for request:\\n\").concat(jsonify(req)), {\n                  request: req\n                }));\n              }\n\n              returnHandlers.push(returnHandler);\n            } // False indicates that the request should not end\n\n\n            resolve([null, false]);\n          }\n        };\n\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(handlers) {\n        var _iterator2, _step2, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(handlers);\n                _context8.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var handler;\n                  return _regeneratorRuntime.wrap(function _loop$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          handler = _step2.value;\n                          _context7.next = 3;\n                          return new Promise(function (resolve, reject) {\n                            handler(function (err) {\n                              return err ? reject(err) : resolve();\n                            });\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.delegateYield(_loop(), \"t0\", 6);\n\n              case 6:\n                _context8.next = 4;\n                break;\n\n              case 8:\n                _context8.next = 13;\n                break;\n\n              case 10:\n                _context8.prev = 10;\n                _context8.t1 = _context8[\"catch\"](1);\n\n                _iterator2.e(_context8.t1);\n\n              case 13:\n                _context8.prev = 13;\n\n                _iterator2.f();\n\n                return _context8.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, null, [[1, 10, 13, 16]]);\n      }));\n\n      function _runReturnHandlers(_x15) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!('result' in res) && !('error' in res)) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Response has no error or result for request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n\n      if (!isComplete) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Nothing ended request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n    }\n  }]);\n\n  return JsonRpcEngine;\n}(safe_event_emitter_1.default);\n\nexports.JsonRpcEngine = JsonRpcEngine;\n\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"mappings":"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","names":["JsonRpcEngine","_middleware","middleware","push","req","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","res","next","end","_runAllMiddleware","middlewareError","isComplete","returnHandlers","_runReturnHandlers","handlerCallback","reqs","Promise","all","map","bind","responses","resolve","_err","callerReq","error","eth_rpc_errors_1","rpc","invalidRequest","request","id","undefined","jsonrpc","method","Object","_processRequest","result","_checkForCompletion","middlewareStack","_runMiddleware","reverse","err","returnHandler","internal","jsonify","handlers","handler","reject","safe_event_emitter_1","exports","JSON","stringify"],"sourceRoot":"","sources":["../src/JsonRpcEngine.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}